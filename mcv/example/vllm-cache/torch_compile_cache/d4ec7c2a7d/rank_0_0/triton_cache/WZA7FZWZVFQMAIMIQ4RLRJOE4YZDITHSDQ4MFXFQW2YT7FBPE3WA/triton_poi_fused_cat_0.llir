; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define amdgpu_kernel void @triton_poi_fused_cat_0(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, ptr addrspace(1) inreg nocapture writeonly %3, ptr addrspace(1) inreg nocapture writeonly %4, i32 inreg %5, ptr addrspace(1) inreg nocapture readnone %6) local_unnamed_addr #0 !dbg !4 {
  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %9 = shl i32 %8, 10, !dbg !8
  %10 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !9
  %11 = shl i32 %10, 2, !dbg !9
  %12 = and i32 %11, 1020, !dbg !9
  %13 = or disjoint i32 %12, %9, !dbg !10
  %14 = icmp slt i32 %13, %5, !dbg !11
  %15 = sdiv i32 %13, 64, !dbg !12
  %16 = mul i32 %15, 64, !dbg !13
  %.decomposed = sub i32 %13, %16, !dbg !13
  %17 = srem i32 %15, 16, !dbg !14
  %18 = sdiv i32 %13, 1024, !dbg !15
  %19 = sext i32 %.decomposed to i64, !dbg !16
  %20 = icmp slt i32 %.decomposed, 32, !dbg !16
  %21 = shl nsw i32 %17, 6, !dbg !17
  %22 = mul i32 %18, 3072, !dbg !18
  %23 = add i32 %21, %22, !dbg !19
  %24 = add i32 %23, %.decomposed, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = and i1 %20, %14, !dbg !22
  %28 = insertelement <4 x i1> poison, i1 %27, i64 0, !dbg !23
  %29 = shufflevector <4 x i1> %28, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !23
  %30 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %26, i32 16, <4 x i1> %29, <4 x bfloat> zeroinitializer), !dbg !23
  %bc = bitcast <4 x bfloat> %30 to <4 x i16>, !dbg !24
  %31 = shufflevector <4 x i16> %bc, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !24
  %32 = zext <2 x i16> %31 to <2 x i32>, !dbg !24
  %33 = shl nuw <2 x i32> %32, splat (i32 16), !dbg !24
  %34 = shufflevector <4 x i16> %bc, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !24
  %35 = zext <2 x i16> %34 to <2 x i32>, !dbg !24
  %36 = shl nuw <2 x i32> %35, splat (i32 16), !dbg !24
  %37 = sext i32 %18 to i64, !dbg !25
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = insertelement <1 x i1> poison, i1 %27, i64 0, !dbg !26
  %40 = tail call <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) %38, i32 8, <1 x i1> %39, <1 x i64> zeroinitializer), !dbg !26
  %41 = extractelement <1 x i64> %40, i64 0, !dbg !26
  %42 = lshr i64 %41, 48, !dbg !27
  %43 = and i64 %42, 32768, !dbg !27
  %44 = add i64 %43, %41, !dbg !27
  %45 = shl i64 %44, 6, !dbg !28
  %46 = getelementptr bfloat, ptr addrspace(1) %2, i64 %45, !dbg !29
  %47 = getelementptr bfloat, ptr addrspace(1) %46, i64 %19, !dbg !29
  %48 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %47, i32 16, <4 x i1> %29, <4 x bfloat> zeroinitializer), !dbg !30
  %bc4 = bitcast <4 x bfloat> %48 to <4 x i16>, !dbg !31
  %49 = shufflevector <4 x i16> %bc4, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !31
  %50 = zext <2 x i16> %49 to <2 x i32>, !dbg !31
  %51 = shl nuw <2 x i32> %50, splat (i32 16), !dbg !31
  %52 = shufflevector <4 x i16> %bc4, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !31
  %53 = zext <2 x i16> %52 to <2 x i32>, !dbg !31
  %54 = shl nuw <2 x i32> %53, splat (i32 16), !dbg !31
  %55 = or disjoint i32 %21, 32, !dbg !32
  %56 = add i32 %55, %22, !dbg !33
  %57 = add i32 %56, %.decomposed, !dbg !34
  %58 = sext i32 %57 to i64, !dbg !35
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !35
  %60 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %59, i32 16, <4 x i1> %29, <4 x bfloat> zeroinitializer), !dbg !36
  %bc8 = bitcast <4 x bfloat> %60 to <4 x i16>, !dbg !37
  %61 = shufflevector <4 x i16> %bc8, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !37
  %62 = zext <2 x i16> %61 to <2 x i32>, !dbg !37
  %63 = shl nuw <2 x i32> %62, splat (i32 16), !dbg !37
  %64 = shufflevector <4 x i16> %bc8, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !37
  %65 = zext <2 x i16> %64 to <2 x i32>, !dbg !37
  %66 = shl nuw <2 x i32> %65, splat (i32 16), !dbg !37
  %67 = or disjoint i64 %45, 32, !dbg !38
  %68 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !39
  %69 = getelementptr bfloat, ptr addrspace(1) %68, i64 %19, !dbg !39
  %70 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %69, i32 16, <4 x i1> %29, <4 x bfloat> zeroinitializer), !dbg !40
  %bc12 = bitcast <4 x bfloat> %70 to <4 x i16>, !dbg !41
  %71 = shufflevector <4 x i16> %bc12, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !41
  %72 = zext <2 x i16> %71 to <2 x i32>, !dbg !41
  %73 = shl nuw <2 x i32> %72, splat (i32 16), !dbg !41
  %74 = shufflevector <4 x i16> %bc12, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !41
  %75 = zext <2 x i16> %74 to <2 x i32>, !dbg !41
  %76 = shl nuw <2 x i32> %75, splat (i32 16), !dbg !41
  %77 = icmp sgt i32 %.decomposed, 31, !dbg !42
  %78 = add nsw i32 %.decomposed, -32, !dbg !43
  %79 = add i32 %56, %78, !dbg !44
  %80 = sext i32 %79 to i64, !dbg !45
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !45
  %82 = and i1 %77, %14, !dbg !46
  %83 = insertelement <4 x i1> poison, i1 %82, i64 0, !dbg !47
  %84 = shufflevector <4 x i1> %83, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !47
  %85 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %81, i32 16, <4 x i1> %84, <4 x bfloat> zeroinitializer), !dbg !47
  %bc16 = bitcast <4 x bfloat> %85 to <4 x i16>, !dbg !48
  %86 = shufflevector <4 x i16> %bc16, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !48
  %87 = zext <2 x i16> %86 to <2 x i32>, !dbg !48
  %88 = shl nuw <2 x i32> %87, splat (i32 16), !dbg !48
  %89 = shufflevector <4 x i16> %bc16, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !48
  %90 = zext <2 x i16> %89 to <2 x i32>, !dbg !48
  %91 = shl nuw <2 x i32> %90, splat (i32 16), !dbg !48
  %92 = insertelement <1 x i1> poison, i1 %82, i64 0, !dbg !49
  %93 = tail call <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) %38, i32 8, <1 x i1> %92, <1 x i64> zeroinitializer), !dbg !49
  %94 = extractelement <1 x i64> %93, i64 0, !dbg !49
  %95 = lshr i64 %94, 48, !dbg !50
  %96 = and i64 %95, 32768, !dbg !50
  %97 = add i64 %96, %94, !dbg !50
  %98 = shl i64 %97, 6, !dbg !51
  %99 = sext i32 %78 to i64, !dbg !52
  %100 = getelementptr bfloat, ptr addrspace(1) %2, i64 %98, !dbg !53
  %101 = getelementptr bfloat, ptr addrspace(1) %100, i64 %99, !dbg !53
  %102 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %101, i32 16, <4 x i1> %84, <4 x bfloat> zeroinitializer), !dbg !54
  %bc20 = bitcast <4 x bfloat> %102 to <4 x i16>, !dbg !55
  %103 = shufflevector <4 x i16> %bc20, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !55
  %104 = zext <2 x i16> %103 to <2 x i32>, !dbg !55
  %105 = shl nuw <2 x i32> %104, splat (i32 16), !dbg !55
  %106 = shufflevector <4 x i16> %bc20, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !55
  %107 = zext <2 x i16> %106 to <2 x i32>, !dbg !55
  %108 = shl nuw <2 x i32> %107, splat (i32 16), !dbg !55
  %109 = add i32 %23, %78, !dbg !56
  %110 = sext i32 %109 to i64, !dbg !57
  %111 = getelementptr bfloat, ptr addrspace(1) %0, i64 %110, !dbg !57
  %112 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %111, i32 16, <4 x i1> %84, <4 x bfloat> zeroinitializer), !dbg !58
  %bc24 = bitcast <4 x bfloat> %112 to <4 x i16>, !dbg !59
  %113 = shufflevector <4 x i16> %bc24, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !59
  %114 = zext <2 x i16> %113 to <2 x i32>, !dbg !59
  %115 = shl nuw <2 x i32> %114, splat (i32 16), !dbg !59
  %116 = shufflevector <4 x i16> %bc24, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !59
  %117 = zext <2 x i16> %116 to <2 x i32>, !dbg !59
  %118 = shl nuw <2 x i32> %117, splat (i32 16), !dbg !59
  %119 = or disjoint i64 %98, 32, !dbg !60
  %120 = getelementptr bfloat, ptr addrspace(1) %2, i64 %119, !dbg !61
  %121 = getelementptr bfloat, ptr addrspace(1) %120, i64 %99, !dbg !61
  %122 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %121, i32 16, <4 x i1> %84, <4 x bfloat> zeroinitializer), !dbg !62
  %bc28 = bitcast <4 x bfloat> %122 to <4 x i16>, !dbg !63
  %123 = shufflevector <4 x i16> %bc28, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !63
  %124 = zext <2 x i16> %123 to <2 x i32>, !dbg !63
  %125 = shl nuw <2 x i32> %124, splat (i32 16), !dbg !63
  %126 = shufflevector <4 x i16> %bc28, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !63
  %127 = zext <2 x i16> %126 to <2 x i32>, !dbg !63
  %128 = shl nuw <2 x i32> %127, splat (i32 16), !dbg !63
  %129 = add i32 %23, 1024, !dbg !64
  %130 = add i32 %129, %.decomposed, !dbg !65
  %131 = sext i32 %130 to i64, !dbg !66
  %132 = getelementptr bfloat, ptr addrspace(1) %0, i64 %131, !dbg !66
  %133 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %132, i32 16, <4 x i1> %29, <4 x bfloat> zeroinitializer), !dbg !67
  %bc32 = bitcast <4 x bfloat> %133 to <4 x i16>, !dbg !68
  %134 = shufflevector <4 x i16> %bc32, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !68
  %135 = zext <2 x i16> %134 to <2 x i32>, !dbg !68
  %136 = shl nuw <2 x i32> %135, splat (i32 16), !dbg !68
  %137 = shufflevector <4 x i16> %bc32, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !68
  %138 = zext <2 x i16> %137 to <2 x i32>, !dbg !68
  %139 = shl nuw <2 x i32> %138, splat (i32 16), !dbg !68
  %140 = add i32 %23, 1056, !dbg !69
  %141 = add i32 %140, %.decomposed, !dbg !70
  %142 = sext i32 %141 to i64, !dbg !71
  %143 = getelementptr bfloat, ptr addrspace(1) %0, i64 %142, !dbg !71
  %144 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %143, i32 16, <4 x i1> %29, <4 x bfloat> zeroinitializer), !dbg !72
  %bc36 = bitcast <4 x bfloat> %144 to <4 x i16>, !dbg !73
  %145 = shufflevector <4 x i16> %bc36, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !73
  %146 = zext <2 x i16> %145 to <2 x i32>, !dbg !73
  %147 = shl nuw <2 x i32> %146, splat (i32 16), !dbg !73
  %148 = shufflevector <4 x i16> %bc36, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !73
  %149 = zext <2 x i16> %148 to <2 x i32>, !dbg !73
  %150 = shl nuw <2 x i32> %149, splat (i32 16), !dbg !73
  %151 = add i32 %140, %78, !dbg !74
  %152 = sext i32 %151 to i64, !dbg !75
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !75
  %154 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %153, i32 16, <4 x i1> %84, <4 x bfloat> zeroinitializer), !dbg !76
  %bc40 = bitcast <4 x bfloat> %154 to <4 x i16>, !dbg !77
  %155 = shufflevector <4 x i16> %bc40, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !77
  %156 = zext <2 x i16> %155 to <2 x i32>, !dbg !77
  %157 = shl nuw <2 x i32> %156, splat (i32 16), !dbg !77
  %158 = shufflevector <4 x i16> %bc40, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !77
  %159 = zext <2 x i16> %158 to <2 x i32>, !dbg !77
  %160 = shl nuw <2 x i32> %159, splat (i32 16), !dbg !77
  %161 = add i32 %129, %78, !dbg !78
  %162 = sext i32 %161 to i64, !dbg !79
  %163 = getelementptr bfloat, ptr addrspace(1) %0, i64 %162, !dbg !79
  %164 = tail call <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) %163, i32 16, <4 x i1> %84, <4 x bfloat> zeroinitializer), !dbg !80
  %bc44 = bitcast <4 x bfloat> %164 to <4 x i16>, !dbg !81
  %165 = shufflevector <4 x i16> %bc44, <4 x i16> poison, <2 x i32> <i32 0, i32 1>, !dbg !81
  %166 = zext <2 x i16> %165 to <2 x i32>, !dbg !81
  %167 = shl nuw <2 x i32> %166, splat (i32 16), !dbg !81
  %168 = shufflevector <4 x i16> %bc44, <4 x i16> poison, <2 x i32> <i32 2, i32 3>, !dbg !81
  %169 = zext <2 x i16> %168 to <2 x i32>, !dbg !81
  %170 = shl nuw <2 x i32> %169, splat (i32 16), !dbg !81
  %171 = sext i32 %13 to i64, !dbg !82
  %172 = getelementptr bfloat, ptr addrspace(1) %3, i64 %171, !dbg !82
  %173 = bitcast <2 x i32> %33 to <2 x float>, !dbg !24
  %174 = bitcast <2 x i32> %51 to <2 x float>, !dbg !31
  %175 = fmul <2 x float> %173, %174, !dbg !83
  %176 = bitcast <2 x i32> %63 to <2 x float>, !dbg !37
  %177 = bitcast <2 x i32> %73 to <2 x float>, !dbg !41
  %178 = fmul <2 x float> %176, %177, !dbg !84
  %179 = fsub <2 x float> %175, %178, !dbg !85
  %180 = bitcast <2 x i32> %88 to <2 x float>, !dbg !48
  %181 = bitcast <2 x i32> %105 to <2 x float>, !dbg !55
  %182 = fmul <2 x float> %180, %181, !dbg !86
  %183 = bitcast <2 x i32> %115 to <2 x float>, !dbg !59
  %184 = bitcast <2 x i32> %125 to <2 x float>, !dbg !63
  %185 = fmul <2 x float> %183, %184, !dbg !87
  %186 = fadd <2 x float> %182, %185, !dbg !88
  %187 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !89
  %188 = shufflevector <2 x i1> %187, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !89
  %189 = select <2 x i1> %188, <2 x float> %179, <2 x float> %186, !dbg !89
  %190 = bitcast <2 x float> %189 to <2 x i32>, !dbg !90
  %191 = and <2 x i32> %190, <i32 65535, i32 2139095040>, !dbg !90
  %192 = icmp ne <2 x i32> %191, <i32 0, i32 2139095040>, !dbg !90
  %193 = icmp eq <2 x i32> %191, <i32 0, i32 2139095040>, !dbg !90
  %194 = shufflevector <2 x i1> %192, <2 x i1> %193, <2 x i32> <i32 0, i32 3>, !dbg !90
  %195 = lshr <2 x i32> %190, splat (i32 16), !dbg !90
  %196 = and <2 x i32> %195, splat (i32 1), !dbg !90
  %197 = add nuw nsw <2 x i32> %196, splat (i32 32767), !dbg !90
  %198 = and <2 x i32> %190, <i32 2139095040, i32 65535>, !dbg !90
  %199 = icmp eq <2 x i32> %198, <i32 2139095040, i32 0>, !dbg !90
  %200 = icmp ne <2 x i32> %198, <i32 2139095040, i32 0>, !dbg !90
  %201 = shufflevector <2 x i1> %199, <2 x i1> %200, <2 x i32> <i32 0, i32 3>, !dbg !90
  %202 = shufflevector <2 x i1> %201, <2 x i1> %194, <2 x i32> <i32 0, i32 3>, !dbg !90
  %203 = select <2 x i1> %202, <2 x i32> zeroinitializer, <2 x i32> %197, !dbg !90
  %204 = add <2 x i32> %203, %190, !dbg !90
  %205 = and <2 x i1> %194, %201, !dbg !90
  %206 = or <2 x i32> %190, splat (i32 65536), !dbg !90
  %207 = select <2 x i1> %205, <2 x i32> %206, <2 x i32> %204, !dbg !90
  %208 = lshr <2 x i32> %207, splat (i32 16), !dbg !90
  %209 = trunc nuw <2 x i32> %208 to <2 x i16>, !dbg !90
  %210 = bitcast <2 x i32> %36 to <2 x float>, !dbg !24
  %211 = bitcast <2 x i32> %54 to <2 x float>, !dbg !31
  %212 = fmul <2 x float> %210, %211, !dbg !83
  %213 = bitcast <2 x i32> %66 to <2 x float>, !dbg !37
  %214 = bitcast <2 x i32> %76 to <2 x float>, !dbg !41
  %215 = fmul <2 x float> %213, %214, !dbg !84
  %216 = fsub <2 x float> %212, %215, !dbg !85
  %217 = bitcast <2 x i32> %91 to <2 x float>, !dbg !48
  %218 = bitcast <2 x i32> %108 to <2 x float>, !dbg !55
  %219 = fmul <2 x float> %217, %218, !dbg !86
  %220 = bitcast <2 x i32> %118 to <2 x float>, !dbg !59
  %221 = bitcast <2 x i32> %128 to <2 x float>, !dbg !63
  %222 = fmul <2 x float> %220, %221, !dbg !87
  %223 = fadd <2 x float> %219, %222, !dbg !88
  %224 = select <2 x i1> %188, <2 x float> %216, <2 x float> %223, !dbg !89
  %225 = bitcast <2 x float> %224 to <2 x i32>, !dbg !90
  %226 = and <2 x i32> %225, <i32 65535, i32 2139095040>, !dbg !90
  %227 = icmp ne <2 x i32> %226, <i32 0, i32 2139095040>, !dbg !90
  %228 = icmp eq <2 x i32> %226, <i32 0, i32 2139095040>, !dbg !90
  %229 = shufflevector <2 x i1> %227, <2 x i1> %228, <2 x i32> <i32 0, i32 3>, !dbg !90
  %230 = lshr <2 x i32> %225, splat (i32 16), !dbg !90
  %231 = and <2 x i32> %230, splat (i32 1), !dbg !90
  %232 = add nuw nsw <2 x i32> %231, splat (i32 32767), !dbg !90
  %233 = and <2 x i32> %225, <i32 2139095040, i32 65535>, !dbg !90
  %234 = icmp eq <2 x i32> %233, <i32 2139095040, i32 0>, !dbg !90
  %235 = icmp ne <2 x i32> %233, <i32 2139095040, i32 0>, !dbg !90
  %236 = shufflevector <2 x i1> %234, <2 x i1> %235, <2 x i32> <i32 0, i32 3>, !dbg !90
  %237 = shufflevector <2 x i1> %236, <2 x i1> %229, <2 x i32> <i32 0, i32 3>, !dbg !90
  %238 = select <2 x i1> %237, <2 x i32> zeroinitializer, <2 x i32> %232, !dbg !90
  %239 = add <2 x i32> %238, %225, !dbg !90
  %240 = and <2 x i1> %229, %236, !dbg !90
  %241 = or <2 x i32> %225, splat (i32 65536), !dbg !90
  %242 = select <2 x i1> %240, <2 x i32> %241, <2 x i32> %239, !dbg !90
  %243 = lshr <2 x i32> %242, splat (i32 16), !dbg !90
  %244 = trunc nuw <2 x i32> %243 to <2 x i16>, !dbg !90
  %245 = shufflevector <2 x i16> %209, <2 x i16> %244, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !90
  %246 = bitcast <4 x i16> %245 to <4 x bfloat>, !dbg !90
  %247 = insertelement <4 x i1> poison, i1 %14, i64 0, !dbg !90
  %248 = shufflevector <4 x i1> %247, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !90
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %246, ptr addrspace(1) %172, i32 16, <4 x i1> %248), !dbg !90
  %249 = getelementptr bfloat, ptr addrspace(1) %4, i64 %171, !dbg !91
  %250 = bitcast <2 x i32> %136 to <2 x float>, !dbg !68
  %251 = bitcast <2 x i32> %147 to <2 x float>, !dbg !73
  %252 = bitcast <2 x i32> %157 to <2 x float>, !dbg !77
  %253 = bitcast <2 x i32> %167 to <2 x float>, !dbg !81
  %254 = fmul <2 x float> %174, %250, !dbg !92
  %255 = fmul <2 x float> %177, %251, !dbg !93
  %256 = fsub <2 x float> %254, %255, !dbg !94
  %257 = fmul <2 x float> %181, %252, !dbg !95
  %258 = fmul <2 x float> %184, %253, !dbg !96
  %259 = fadd <2 x float> %257, %258, !dbg !97
  %260 = select <2 x i1> %188, <2 x float> %256, <2 x float> %259, !dbg !89
  %261 = bitcast <2 x float> %260 to <2 x i32>, !dbg !98
  %262 = and <2 x i32> %261, <i32 65535, i32 2139095040>, !dbg !98
  %263 = icmp ne <2 x i32> %262, <i32 0, i32 2139095040>, !dbg !98
  %264 = icmp eq <2 x i32> %262, <i32 0, i32 2139095040>, !dbg !98
  %265 = shufflevector <2 x i1> %263, <2 x i1> %264, <2 x i32> <i32 0, i32 3>, !dbg !98
  %266 = lshr <2 x i32> %261, splat (i32 16), !dbg !98
  %267 = and <2 x i32> %266, splat (i32 1), !dbg !98
  %268 = add nuw nsw <2 x i32> %267, splat (i32 32767), !dbg !98
  %269 = and <2 x i32> %261, <i32 2139095040, i32 65535>, !dbg !98
  %270 = icmp eq <2 x i32> %269, <i32 2139095040, i32 0>, !dbg !98
  %271 = icmp ne <2 x i32> %269, <i32 2139095040, i32 0>, !dbg !98
  %272 = shufflevector <2 x i1> %270, <2 x i1> %271, <2 x i32> <i32 0, i32 3>, !dbg !98
  %273 = shufflevector <2 x i1> %272, <2 x i1> %265, <2 x i32> <i32 0, i32 3>, !dbg !98
  %274 = select <2 x i1> %273, <2 x i32> zeroinitializer, <2 x i32> %268, !dbg !98
  %275 = add <2 x i32> %274, %261, !dbg !98
  %276 = and <2 x i1> %265, %272, !dbg !98
  %277 = or <2 x i32> %261, splat (i32 65536), !dbg !98
  %278 = select <2 x i1> %276, <2 x i32> %277, <2 x i32> %275, !dbg !98
  %279 = lshr <2 x i32> %278, splat (i32 16), !dbg !98
  %280 = trunc nuw <2 x i32> %279 to <2 x i16>, !dbg !98
  %281 = bitcast <2 x i32> %139 to <2 x float>, !dbg !68
  %282 = bitcast <2 x i32> %150 to <2 x float>, !dbg !73
  %283 = bitcast <2 x i32> %160 to <2 x float>, !dbg !77
  %284 = bitcast <2 x i32> %170 to <2 x float>, !dbg !81
  %285 = fmul <2 x float> %211, %281, !dbg !92
  %286 = fmul <2 x float> %214, %282, !dbg !93
  %287 = fsub <2 x float> %285, %286, !dbg !94
  %288 = fmul <2 x float> %218, %283, !dbg !95
  %289 = fmul <2 x float> %221, %284, !dbg !96
  %290 = fadd <2 x float> %288, %289, !dbg !97
  %291 = select <2 x i1> %188, <2 x float> %287, <2 x float> %290, !dbg !89
  %292 = bitcast <2 x float> %291 to <2 x i32>, !dbg !98
  %293 = and <2 x i32> %292, <i32 65535, i32 2139095040>, !dbg !98
  %294 = icmp ne <2 x i32> %293, <i32 0, i32 2139095040>, !dbg !98
  %295 = icmp eq <2 x i32> %293, <i32 0, i32 2139095040>, !dbg !98
  %296 = shufflevector <2 x i1> %294, <2 x i1> %295, <2 x i32> <i32 0, i32 3>, !dbg !98
  %297 = lshr <2 x i32> %292, splat (i32 16), !dbg !98
  %298 = and <2 x i32> %297, splat (i32 1), !dbg !98
  %299 = add nuw nsw <2 x i32> %298, splat (i32 32767), !dbg !98
  %300 = and <2 x i32> %292, <i32 2139095040, i32 65535>, !dbg !98
  %301 = icmp eq <2 x i32> %300, <i32 2139095040, i32 0>, !dbg !98
  %302 = icmp ne <2 x i32> %300, <i32 2139095040, i32 0>, !dbg !98
  %303 = shufflevector <2 x i1> %301, <2 x i1> %302, <2 x i32> <i32 0, i32 3>, !dbg !98
  %304 = shufflevector <2 x i1> %303, <2 x i1> %296, <2 x i32> <i32 0, i32 3>, !dbg !98
  %305 = select <2 x i1> %304, <2 x i32> zeroinitializer, <2 x i32> %299, !dbg !98
  %306 = add <2 x i32> %305, %292, !dbg !98
  %307 = and <2 x i1> %296, %303, !dbg !98
  %308 = or <2 x i32> %292, splat (i32 65536), !dbg !98
  %309 = select <2 x i1> %307, <2 x i32> %308, <2 x i32> %306, !dbg !98
  %310 = lshr <2 x i32> %309, splat (i32 16), !dbg !98
  %311 = trunc nuw <2 x i32> %310 to <2 x i16>, !dbg !98
  %312 = shufflevector <2 x i16> %280, <2 x i16> %311, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !98
  %313 = bitcast <4 x i16> %312 to <4 x bfloat>, !dbg !98
  tail call void @llvm.masked.store.v4bf16.p1(<4 x bfloat> %313, ptr addrspace(1) %249, i32 16, <4 x i1> %248), !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x bfloat> @llvm.masked.load.v4bf16.p1(ptr addrspace(1) nocapture, i32 immarg, <4 x i1>, <4 x bfloat>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <1 x i64> @llvm.masked.load.v1i64.p1(ptr addrspace(1) nocapture, i32 immarg, <1 x i1>, <1 x i64>) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v4bf16.p1(<4 x bfloat>, ptr addrspace(1) nocapture, i32 immarg, <4 x i1>) #3

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccgg53vsz46gfbpmfjxfnftiwzdbqyp25362gk22zlpidd7dhbzl.py", directory: "/home/vllm/.cache/vllm/torch_compile_cache/d4ec7c2a7d/rank_0_0/inductor_cache/cg")
!4 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !5, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 20, column: 28, scope: !4)
!8 = !DILocation(line: 20, column: 33, scope: !4)
!9 = !DILocation(line: 21, column: 36, scope: !4)
!10 = !DILocation(line: 21, column: 23, scope: !4)
!11 = !DILocation(line: 22, column: 21, scope: !4)
!12 = !DILocation(line: 24, column: 21, scope: !4)
!13 = !DILocation(line: 23, column: 19, scope: !4)
!14 = !DILocation(line: 24, column: 27, scope: !4)
!15 = !DILocation(line: 25, column: 19, scope: !4)
!16 = !DILocation(line: 31, column: 18, scope: !4)
!17 = !DILocation(line: 33, column: 33, scope: !4)
!18 = !DILocation(line: 33, column: 43, scope: !4)
!19 = !DILocation(line: 33, column: 38, scope: !4)
!20 = !DILocation(line: 33, column: 49, scope: !4)
!21 = !DILocation(line: 33, column: 30, scope: !4)
!22 = !DILocation(line: 33, column: 63, scope: !4)
!23 = !DILocation(line: 33, column: 55, scope: !4)
!24 = !DILocation(line: 33, column: 113, scope: !4)
!25 = !DILocation(line: 34, column: 30, scope: !4)
!26 = !DILocation(line: 34, column: 35, scope: !4)
!27 = !DILocation(line: 38, column: 34, scope: !4)
!28 = !DILocation(line: 40, column: 34, scope: !4)
!29 = !DILocation(line: 40, column: 31, scope: !4)
!30 = !DILocation(line: 40, column: 49, scope: !4)
!31 = !DILocation(line: 40, column: 107, scope: !4)
!32 = !DILocation(line: 42, column: 36, scope: !4)
!33 = !DILocation(line: 42, column: 44, scope: !4)
!34 = !DILocation(line: 42, column: 55, scope: !4)
!35 = !DILocation(line: 42, column: 31, scope: !4)
!36 = !DILocation(line: 42, column: 61, scope: !4)
!37 = !DILocation(line: 42, column: 119, scope: !4)
!38 = !DILocation(line: 43, column: 36, scope: !4)
!39 = !DILocation(line: 43, column: 31, scope: !4)
!40 = !DILocation(line: 43, column: 54, scope: !4)
!41 = !DILocation(line: 43, column: 112, scope: !4)
!42 = !DILocation(line: 48, column: 20, scope: !4)
!43 = !DILocation(line: 52, column: 63, scope: !4)
!44 = !DILocation(line: 52, column: 55, scope: !4)
!45 = !DILocation(line: 52, column: 31, scope: !4)
!46 = !DILocation(line: 52, column: 77, scope: !4)
!47 = !DILocation(line: 52, column: 69, scope: !4)
!48 = !DILocation(line: 52, column: 128, scope: !4)
!49 = !DILocation(line: 53, column: 36, scope: !4)
!50 = !DILocation(line: 57, column: 35, scope: !4)
!51 = !DILocation(line: 59, column: 34, scope: !4)
!52 = !DILocation(line: 59, column: 43, scope: !4)
!53 = !DILocation(line: 59, column: 31, scope: !4)
!54 = !DILocation(line: 59, column: 57, scope: !4)
!55 = !DILocation(line: 59, column: 116, scope: !4)
!56 = !DILocation(line: 61, column: 50, scope: !4)
!57 = !DILocation(line: 61, column: 31, scope: !4)
!58 = !DILocation(line: 61, column: 64, scope: !4)
!59 = !DILocation(line: 61, column: 123, scope: !4)
!60 = !DILocation(line: 62, column: 36, scope: !4)
!61 = !DILocation(line: 62, column: 31, scope: !4)
!62 = !DILocation(line: 62, column: 62, scope: !4)
!63 = !DILocation(line: 62, column: 121, scope: !4)
!64 = !DILocation(line: 68, column: 46, scope: !4)
!65 = !DILocation(line: 68, column: 57, scope: !4)
!66 = !DILocation(line: 68, column: 31, scope: !4)
!67 = !DILocation(line: 68, column: 63, scope: !4)
!68 = !DILocation(line: 68, column: 121, scope: !4)
!69 = !DILocation(line: 70, column: 46, scope: !4)
!70 = !DILocation(line: 70, column: 57, scope: !4)
!71 = !DILocation(line: 70, column: 31, scope: !4)
!72 = !DILocation(line: 70, column: 63, scope: !4)
!73 = !DILocation(line: 70, column: 121, scope: !4)
!74 = !DILocation(line: 75, column: 57, scope: !4)
!75 = !DILocation(line: 75, column: 31, scope: !4)
!76 = !DILocation(line: 75, column: 71, scope: !4)
!77 = !DILocation(line: 75, column: 130, scope: !4)
!78 = !DILocation(line: 77, column: 57, scope: !4)
!79 = !DILocation(line: 77, column: 31, scope: !4)
!80 = !DILocation(line: 77, column: 71, scope: !4)
!81 = !DILocation(line: 77, column: 130, scope: !4)
!82 = !DILocation(line: 83, column: 25, scope: !4)
!83 = !DILocation(line: 41, column: 19, scope: !4)
!84 = !DILocation(line: 44, column: 20, scope: !4)
!85 = !DILocation(line: 45, column: 20, scope: !4)
!86 = !DILocation(line: 60, column: 20, scope: !4)
!87 = !DILocation(line: 63, column: 20, scope: !4)
!88 = !DILocation(line: 64, column: 20, scope: !4)
!89 = !DILocation(line: 0, scope: !4)
!90 = !DILocation(line: 83, column: 37, scope: !4)
!91 = !DILocation(line: 84, column: 25, scope: !4)
!92 = !DILocation(line: 69, column: 20, scope: !4)
!93 = !DILocation(line: 71, column: 20, scope: !4)
!94 = !DILocation(line: 72, column: 20, scope: !4)
!95 = !DILocation(line: 76, column: 20, scope: !4)
!96 = !DILocation(line: 78, column: 20, scope: !4)
!97 = !DILocation(line: 79, column: 20, scope: !4)
!98 = !DILocation(line: 84, column: 37, scope: !4)
!99 = !DILocation(line: 84, column: 4, scope: !4)
